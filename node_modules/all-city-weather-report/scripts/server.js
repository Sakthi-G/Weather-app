var allCityTimeZone = [],
  startTime = new Date(),
  dayCheck = 14400000;

let express = require("express");
let path = require("path");
let app = express();
const { fork } = require("child_process");
let bodyParser = require("body-parser");

app.use("/index(.html)?", express.static(path.join(__dirname, "..")));
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.get("/all-timezone-cities", (request, response) => {
  let currentTime = new Date();
  let childProcess = fork("./weather-data.js");
  childProcess.send("fetchAllCityDetails");
  if (currentTime - startTime > dayCheck) {
    startTime = new Date();
    childProcess.on("message", (weatherReport) => {
      allCityTimeZone = weatherReport;
      response.send(allCityTimeZone);
    });
  } else {
    if (allCityTimeZone.length === 0) {
      childProcess.on("message", (weatherReport) => {
        allCityTimeZone = weatherReport;
        response.send(allCityTimeZone);
      });
    }
  }
});

app.get("/", (request, response) => {
  let city = request.query.city;
  let childProcess = fork("./weather-data.js");
  if (city) {
    childProcess.send(city);
    childProcess.on("message", (dateAndTime) => {
      response.json(dateAndTime);
    });
  } else {
    response
      .status(404)
      .json({ Error: "Not a Valid EndPoint. Please check API Doc" });
  }
});

app.post("/hourly-forecast", (request, response) => {
  let cityTDN = request.body.city_Date_Time_Name;
  let hours = request.body.hours;
  let childProcess = fork("./weather-data.js");
  if (cityTDN && hours) {
    childProcess.send({
      cityTDN: request.body.city_Date_Time_Name,
      hours: request.body.hours,
      weatherData: allCityTimeZone,
    });
    childProcess.on("message", (successiveHrsData) => {
      response.send(successiveHrsData);
    });
  } else {
    response
      .status(404)
      .json({ Error: "Not a Valid EndPoint. Please check API Doc" });
  }
});

app.listen(9999);
